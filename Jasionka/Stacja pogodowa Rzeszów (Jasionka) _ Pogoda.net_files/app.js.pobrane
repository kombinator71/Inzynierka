// Generated by CoffeeScript 1.8.0
var Pogoda, pogoda;

Pogoda = (function() {
  Pogoda.baseUrl = '/';

  function Pogoda() {
    var that;
    require.config({
      baseUrl: 'js',
      paths: {
        async: 'vendor/require-async',
        bootstrap: 'vendor/bootstrap/bootstrap.min',
        chart: 'vendor/hightcharts/highcharts',
        jquery: '//code.jquery.com/jquery-1.11.2.min',
        prettify: '//cdn.rawgit.com/google/code-prettify/master/loader/run_prettify',
        prettify_css: '//cdnjs.cloudflare.com/ajax/libs/prettify/r298/lang-css.min',
        typeahead: '//cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.10.4/typeahead.bundle.min'
      },
      shim: {
        'bootstrap': {
          deps: ['jquery']
        },
        'prettify_css': {
          deps: ['prettify']
        }
      }
    });
    that = this;
    define(['jquery', 'bootstrap'], function($, Bootstrap) {
      return $(function() {
        return that.startApp();
      });
    });
  }

  Pogoda.prototype.formatDate = function(dt) {
    var d, h, i, m, monthNames, y;
    monthNames = ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia'];
    y = dt.getFullYear();
    m = dt.getMonth();
    d = dt.getDate();
    h = dt.getHours();
    i = dt.getMinutes() + '';
    if (i.length === 1) {
      i = '0' + i;
    }
    return d + ' ' + monthNames[m] + ' ' + y + ' godz. ' + h + ':' + i;
  };

  Pogoda.prototype.startApp = function() {
    var $body, $navbarPlaceChoose, $searchBox;
    $body = $('body');
    if ($body.hasClass('stations-index')) {
      this.stationsIndex();
    }
    if ($body.hasClass('stations-view')) {
      this.stationsView();
    }
    if ($body.hasClass('widgets-index')) {
      this.widgetsIndex();
    }
    if ($body.hasClass('widgets-style')) {
      this.widgetsStyle();
    }
    $navbarPlaceChoose = $('.navbar-place-choose');
    if ($navbarPlaceChoose.length > 0) {
      $searchBox = $('#search-box');
      return require(['typeahead'], function() {
        var $searchBoxInput, data;
        data = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          remote: {
            url: "" + Pogoda.baseUrl + "places/autocomplete?term=%QUERY",
            wildcard: '%QUERY'
          }
        });
        data.initialize();
        $searchBoxInput = $searchBox.find('.form-control');
        $searchBoxInput.typeahead({
          minLength: 2,
          highlight: true
        }, {
          name: 'cities',
          display: 'value',
          source: data.ttAdapter(),
          templates: {
            suggestion: function(data) {
              return "" + data.value + " (" + data.region + ")";
            }
          }
        });
        $searchBoxInput.on('typeahead:selected typeahead:autocompleted', function(e, datum) {
          return window.location = datum.path;
        });
        $navbarPlaceChoose.on('click', function(e) {
          var offset;
          e.preventDefault();
          if ($searchBox.hasClass('v')) {
            return $searchBox.fadeOut().removeClass('v');
          } else {
            offset = $(this).offset();
            $searchBox.css({
              left: offset.left - 7,
              top: offset.top - 5
            });
            $searchBox.fadeIn().addClass('v');
            return $searchBoxInput[0].focus();
          }
        });
        return $('body').on('click', function(e) {
          if ($searchBox.hasClass('v') && $(e.target).closest('.navbar-place-choose').length === 0 && $(e.target).closest("#search-box").length === 0) {
            return $searchBox.fadeOut().removeClass('v');
          }
        });
      });
    }
  };

  Pogoda.prototype.stationsIndex = function() {
    var $map;
    $map = $('#map');
    if ($map.length === 0) {
      return null;
    }
    return require(['async!http://maps.googleapis.com/maps/api/js?sensor=false&language=pl'], function() {
      var index, map, mapMarker, mapOptions, marker, pos, _i, _len, _results;
      mapOptions = {
        zoom: 4,
        center: new google.maps.LatLng(50, 19),
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControl: false,
        streetViewControl: false
      };
      map = new google.maps.Map(document.getElementById("map"), mapOptions);
      if (mapMarkers) {
        _results = [];
        for (index = _i = 0, _len = mapMarkers.length; _i < _len; index = ++_i) {
          mapMarker = mapMarkers[index];
          pos = new google.maps.LatLng(mapMarker[0], mapMarker[1]);
          marker = new google.maps.Marker({
            position: pos,
            map: map,
            title: mapMarker[2]
          });
          google.maps.event.addListener(marker, 'click', (function(marker, index) {
            return function() {
              return window.location = "http://pogoda.net/stations/" + mapMarkers[index][3];
            };
          })(marker, index));
          continue;
        }
        return _results;
      }
    });
  };

  Pogoda.prototype.stationsView = function() {
    var that;
    that = this;
    return require(['chart'], function() {
      var chart1, chart2, chart3, chart4;
      Highcharts.setOptions({
        global: {
          useUTC: false
        },
        chart: {
          type: 'spline',
          animation: false
        },
        title: {
          text: null
        },
        xAxis: {
          type: 'datetime'
        },
        yAxis: {
          title: {
            text: null
          }
        },
        legend: {
          enabled: false
        },
        plotOptions: {
          spline: {
            marker: {
              enabled: false,
              states: {
                hover: {
                  enabled: true,
                  radius: 4,
                  lineWidth: 1
                }
              }
            },
            lineWidth: 2
          }
        },
        lang: {
          months: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia'],
          shortMonths: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Paź', 'Lis', 'Gru'],
          weekdays: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota']
        }
      });
      chart1 = new Highcharts.Chart({
        chart: {
          renderTo: 'chart-temperature'
        },
        colors: ['#058DC7'],
        yAxis: {
          labels: {
            formatter: function() {
              return this.value + '°C';
            }
          }
        },
        tooltip: {
          formatter: function() {
            var dt;
            dt = new Date();
            dt.setTime(this.x);
            return that.formatDate(dt) + '<br/>temperatura: <b>' + this.y + '°C</b>';
          }
        },
        series: [
          {
            data: data['chart-temperature'],
            animation: false
          }
        ]
      });
      chart2 = new Highcharts.Chart({
        chart: {
          renderTo: 'chart-press'
        },
        colors: ['#50B432'],
        yAxis: {
          labels: {
            formatter: function() {
              return this.value + ' hPa';
            }
          }
        },
        tooltip: {
          formatter: function() {
            var dt;
            dt = new Date();
            dt.setTime(this.x);
            return that.formatDate(dt) + '<br/>ciśnienie: <b>' + this.y + ' hPa</b>';
          }
        },
        series: [
          {
            data: data['chart-press'],
            animation: false
          }
        ]
      });
      chart3 = new Highcharts.Chart({
        chart: {
          renderTo: 'chart-humidity'
        },
        colors: ['#ED561B'],
        yAxis: {
          labels: {
            formatter: function() {
              return this.value + ' %';
            }
          }
        },
        tooltip: {
          formatter: function() {
            var dt;
            dt = new Date();
            dt.setTime(this.x);
            return that.formatDate(dt) + '<br/>wilgotoność: <b>' + this.y + ' %</b>';
          }
        },
        series: [
          {
            data: data['chart-humidity'],
            animation: false
          }
        ]
      });
      return chart4 = new Highcharts.Chart({
        chart: {
          renderTo: 'chart-wind'
        },
        colors: ['#DDDF00', '#24CBE5'],
        yAxis: {
          labels: {
            formatter: function() {
              return this.value + ' km/h';
            }
          }
        },
        tooltip: {
          formatter: function() {
            var dt;
            dt = new Date();
            dt.setTime(this.x);
            return that.formatDate(dt) + '<br/>prędkość: <b>' + this.y + ' km/h</b>';
          }
        },
        series: [
          {
            data: data['chart-wind'],
            animation: false
          }
        ]
      });
    });
  };

  Pogoda.prototype.widgetsIndex = function() {
    var that;
    that = this;
    require(['typeahead'], function() {
      var data;
      data = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: {
          url: "" + Pogoda.baseUrl + "places/autocomplete?term=%QUERY",
          wildcard: '%QUERY'
        }
      });
      data.initialize();
      $('#WidgetPlaceName').typeahead({
        minLength: 2,
        highlight: true
      }, {
        name: 'cities',
        display: 'value',
        source: data.ttAdapter(),
        templates: {
          suggestion: function(data) {
            return "" + data.value + " (" + data.region + ")";
          }
        }
      });
      return $('#WidgetPlaceName').on('typeahead:selected typeahead:autocompleted', function(e, datum) {
        $('#WidgetPlaceId').val(datum.id);
        return that.widgetsIndexUpdate();
      });
    });
    $('input[name="data[Widget][format]"]').on('change', function() {
      $('#WidgetIndexForm').removeClass('vertical horizontal');
      return $('#WidgetIndexForm').addClass($('input[name="data[Widget][format]"]:checked').val());
    });
    $('input[name="data[Widget][format]"],#WidgetWidth,#WidgetLimit,#WidgetPlaceId').on('change', function() {
      return that.widgetsIndexUpdate();
    });
    $('#WidgetPlaceName').on('change', function() {
      if ($('#WidgetPlaceName').val() === '') {
        return $('#WidgetPlaceId').val('').change();
      }
    });
    return $('textarea').on('click', function() {
      return this.select();
    });
  };

  Pogoda.prototype.widgetsIndexUpdate = function() {
    var format, limit, pid, src, width;
    $('#widget_code').hide();
    format = $('input[name="data[Widget][format]"]:checked').val();
    width = $('#WidgetWidth').val();
    limit = $('#WidgetLimit').val();
    pid = $('#WidgetPlaceId').val();
    src = "" + Pogoda.baseUrl + "widgets/js_v2?format=" + format + "&limit=" + limit;
    if (format === 'vertical') {
      src += '&width=' + width;
    }
    if (pid) {
      src += '&pid=' + pid;
    }
    if (format === 'horizontal') {
      width = 150 * (1 + parseInt(limit));
    }
    $('#PogodaNetWidget').html('<a href="http://pogoda.net">pogoda.net</a>').width("" + width + "px");
    return $.getScript(src);
  };

  Pogoda.prototype.widgetsStyle = function() {
    return require(['prettify', 'prettify_css']);
  };

  return Pogoda;

})();

pogoda = new Pogoda;
